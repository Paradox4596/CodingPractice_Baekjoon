01 Question: 1509번

세준이는 어떤 문자열을 팰린드롬으로 분할하려고 한다. 예를 들어, ABACABA를 팰린드롬으로 분할하면, {A, B, A, C, A, B, A}, {A, BACAB, A}, {ABA, C, ABA}, {ABACABA}등이 있다.

분할의 개수의 최솟값을 출력하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
01 MySolution: 1509번

#include <iostream> 
#include <cstring>
 
#define INF 1e9+7
 
using namespace std;
 
bool dp[2501][2501];
string str;
int N, res[2501];
 
bool is_palin(int st, int ed){
    if(ed > N) return false;
    
    if(str[st] == str[ed]){
        if(dp[st+1][ed-1] || ed-st == 1){
            return true;
        }
    }
    return false;
}
 
void fill_dptable(){
    for(int d = 0; d < N; d++){
        for(int i = 1; i+d <= N; i++){
            if(d == 0){
                dp[i][i] = true;
                continue;
            }
            if(is_palin(i, i+d)){
                dp[i][i+d] = true;
            }
        }
    }
}
 
void solve(){
    fill_dptable();
    
    res[0] = 0;
    for (int i = 1; i <= N; i++) {
        res[i] = INF;
        for (int j = 1; j <= i; j++) {
            if (dp[j][i]) {
                if (res[i] > res[j-1]+1) {
                    res[i] = res[j-1]+1;
                }
            }
        }
    }
    cout << res[N];
}
 
int main(){
    cin >> str;
    N = str.size();
    str = " " + str;
    solve();
    
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 2169번

NASA에서는 화성 탐사를 위해 화성에 무선 조종 로봇을 보냈다. 실제 화성의 모습은 굉장히 복잡하지만, 로봇의 메모리가 얼마 안 되기 때문에 지형을 N×M 배열로 단순화 하여 생각하기로 한다.

지형의 고저차의 특성상, 로봇은 움직일 때 배열에서 왼쪽, 오른쪽, 아래쪽으로 이동할 수 있지만, 위쪽으로는 이동할 수 없다. 또한 한 번 탐사한 지역(배열에서 하나의 칸)은 탐사하지 않기로 한다.

각각의 지역은 탐사 가치가 있는데, 로봇을 배열의 왼쪽 위 (1, 1)에서 출발시켜 오른쪽 아래 (N, M)으로 보내려고 한다. 이때, 위의 조건을 만족하면서, 탐사한 지역들의 가치의 합이 최대가 되도록 하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 2169번

#include <iostream>
#include <algorithm>
using namespace std;
int arr[1001][1001];
int dp[1001][1001][3];
int side[3][2] = { {0,-1},{0,1},{1,0} };
bool visit[1001][1001];
int N, M;
int DFS(int y, int x, int dir)
{
	if (y == N - 1 && x == M - 1)
		return arr[y][x];

	if (dp[y][x][dir] != -987654321)
		return dp[y][x][dir];

	for (int i = 0; i < 3; i++)
	{
		int ny = y + side[i][0];
		int nx = x + side[i][1];

		if (ny >= 0 && nx >= 0 && nx < M && ny < N && visit[ny][nx] == false)
		{
			visit[ny][nx] = true;
			dp[y][x][dir] = max(dp[y][x][dir], arr[y][x] + DFS(ny, nx, i));
			visit[ny][nx] = false;
		}
	}

	return dp[y][x][dir];
}
int main(void)
{
	cin >> N >> M;
	for(int i=0;i<N;i++)
		for (int j = 0; j < M; j++)
		{
			cin >> arr[i][j];

			dp[i][j][0] = -987654321;
			dp[i][j][1] = -987654321;
			dp[i][j][2] = -987654321;
			visit[i][j] = false;
		}
	visit[0][0] = true;
	cout << DFS(0, 0, 0);

}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 13392번

아래 그림과 같이 N개의 회전이 가능한 숫자 나사가 아래위로 연결되어 있다. 가장 위에 있는 숫자나사는 숫자나사 1이고 가장 아래에 있는 숫자나사는 숫자나사 N이다. 모든 숫자나사는 각각 10개의 면을 가지고 있고, 각 면에는 오른쪽 방향으로 0, 1, 2, 3, …, 9까지의 숫자가 하나씩 순서대로 적혀 있다. 하나의 숫자나사를 왼쪽으로 회전 시키면, 이 나사보다 아래에 위치한 모든 나사는 같이 따라서 돌게 되지만, 나사를 오른쪽으로 회전시키면, 다른 나사는 함께 돌지는 않는다. 정면에서 보아 위에서부터 아래쪽으로 숫자를 읽어 내려간다고 할 때, 현재의 상태에서 가장 적은 칸수의 움직임으로 원하는 숫자를 만들기 위한 방법을 출력하는 프로그램을 작성하라.

예를 들어 세 개의 숫자나사가 주어졌을 때, 정면에서 보는 현재 상태가 326이고 원하는 상태는 446이라면 최소 회전 칸수는 4이다. 먼저 숫자나사 1을 왼쪽으로 한 칸 돌리면 437이 되고, 숫자나사 2를 역시 왼쪽으로 한 칸 돌리면 448이 되며, 마지막으로 숫자나사 3을 오른쪽으로 두 칸 돌리면 446이 된다.
----------------------------------------------------------------------------
03 MySolution: 13392번

#include <iostream>
#include <vector>
#include <limits>
#include <string>
using namespace std;
#define INF numeric_limits<int>::max()

vector<vector<int>> dp(10000, vector<int>(10, INF));

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int N; cin >> N;

    string start, end; cin >> start >> end;

    vector<int> s(N), e(N);
    for (int i = 0; i < N; i++){
        s[i] = start[i] - '0';
        e[i] = end[i] - '0';
    }

    for(int i = 0; i < 10; i++) dp[0][i] = ((s[0]+i)%10 - e[0] + 10) % 10  + i;

    for(int i = 1; i <= N-1; i++){
        for(int j = 0; j < 10; j++){
            for (int k = 0; k < 10; k++){
                int next = (s[i] + j + k) % 10;
                dp[i][(j + k) % 10] = min(dp[i-1][j] + (next - e[i] + 10) % 10 + k, dp[i][(j+k)%10]);
            }
        }
    }
    int ret = INF;
    for (int i = 0; i < 10; i++) ret = min(ret, dp[N-1][i]);
    cout << ret << endl;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

04 Question: 2494번

아래 그림과 같이 N개의 회전이 가능한 숫자 나사가 아래위로 연결되어 있다. 가장 위에 있는 숫자나사는 숫자나사 1이고 가장 아래에 있는 숫자나사는 숫자나사 N이다. 모든 숫자나사는 각각 10개의 면을 가지고 있고, 각 면에는 오른쪽 방향으로 0, 1, 2, 3, …, 9까지의 숫자가 하나씩 순서대로 적혀 있다. 하나의 숫자나사를 왼쪽으로 회전 시키면, 이 나사보다 아래에 위치한 모든 나사는 같이 따라서 돌게 되지만, 나사를 오른쪽으로 회전시키면, 다른 나사는 함께 돌지는 않는다. 정면에서 보아 위에서부터 아래쪽으로 숫자를 읽어 내려간다고 할 때, 현재의 상태에서 가장 적은 칸수의 움직임으로 원하는 숫자를 만들기 위한 방법을 출력하는 프로그램을 작성하라.

예를 들어 세 개의 숫자나사가 주어졌을 때, 정면에서 보는 현재 상태가 326이고 원하는 상태는 446이라면 최소 회전 칸수는 4이다. 먼저 숫자나사 1을 왼쪽으로 한 칸 돌리면 437이 되고, 숫자나사 2를 역시 왼쪽으로 한 칸 돌리면 448이 되며, 마지막으로 숫자나사 3을 오른쪽으로 두 칸 돌리면 446이 된다.

----------------------------------------------------------------------------
04 MySolution: 2494번

#include<iostream>
#include<string.h>
#include<string>
using namespace std;

typedef struct state {
	int total_turn = -1;
	int turn = 0;
}State;

State dp[10000][10];
char init[10000], dest[10000];
int screw_num;
const int MOD = 10;

int TurnScrew(int left_turned, int idx) {
	if (idx == screw_num)
		return 0;

	int num = init[idx] + left_turned;
	num %= MOD;

	int& ret = dp[idx][num].total_turn;
	if (ret != -1)
		return ret;

	int right;
	if (dest[idx] > num)
		right = num + 10 - dest[idx];
	else
		right = num - dest[idx];

	int left;
	if (dest[idx] >= num)
		left = dest[idx] - num;
	else
		left = dest[idx] + 10 - num;

	int left_num = TurnScrew((left_turned + left) % MOD, idx + 1) + left;
	int right_num = TurnScrew(left_turned, idx + 1) + right;
	
	if (left_num < right_num) {
		ret = left_num;
		dp[idx][num].turn = left;
	}
	else {
		ret = right_num;
		dp[idx][num].turn = -right;
	}

	return ret;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin >> screw_num;

	string init_state, dest_state;
	cin >> init_state >> dest_state;

	for (int i = 0; i < screw_num; ++i) {
		init[i] = init_state[i] - '0';
		dest[i] = dest_state[i] - '0';
	}

	cout << TurnScrew(0, 0) << '\n';

	int idx = 0, num = init[0], total_left = 0;
	while (1) {
		cout << idx + 1 << ' ' << dp[idx][num].turn << '\n';
		if (dp[idx][num].turn > 0) {
			total_left += dp[idx][num].turn;
			total_left %= MOD;
		}
		idx++;
		if (idx == screw_num)
			break;
		num = (init[idx] + total_left) % MOD;
	}

	return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

05 Question: 13976번

3×N 크기의 벽을 2×1, 1×2 크기의 타일로 채우는 경우의 수를 구해보자.
----------------------------------------------------------------------------
05 MySolution: 13976번

#include <iostream>
using namespace std;
typedef long long ll;

ll mat[2][2] = { {4,-1},{1,0} };
ll vec[2] = { 3,1 };

ll tmat[3][3];
ll tvec[3];

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	ll N; cin >> N;
	if (N & 1) cout << 0;
	else {
		N >>= 1;
		N--;
		while (N > 0) {
			if (N & 1) {
				for (int i = 0; i < 2; i++) {
					tvec[i] = 0;
					for (int k = 0; k < 2; k++) {
						tvec[i] += mat[i][k] * vec[k];
					}
				}
				for (int i = 0; i < 2; i++) {
					vec[i] = tvec[i] % 1000000007;
				}
			}

			for (int i = 0; i < 2; i++) {
				for (int j = 0; j < 2; j++) {
					tmat[i][j] = 0;
					for (int k = 0; k < 2; k++) {
						tmat[i][j] += mat[i][k] * mat[k][j];
					}
				}
			}
			for (int i = 0; i < 2; i++) {
				for (int j = 0; j < 2; j++) {
					mat[i][j] = tmat[i][j] % 1000000007;
				}
			}
			N >>= 1;
		}

		if (vec[0] < 0) vec[0] += 1000000007;
		cout << vec[0];
	}
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

06 Question: 1648번

준규는 침대에 누워서 천장을 바라보고 있었다. 천장은 격자판 모양이었고, 계속해서 천장을 바라보다 보니 이런 생각이 들었다.

세로 크기가 N이고, 가로 크기가 M인 격자판을 2x1 크기의 도미노를 이용해서 빈 공간이 없도록 채우는 방법의 수는 몇일까?

아래 그림은 N = 3, M = 6인 예이다.



N과 M이 주어졌을 때, 격자판을 2x1크기의 도미노로 채우는 방법의 수를 구하는 방법을 작성하시오. 도미노는 회전시켜 1x2크기로 채울 수 있다. 도미노로 모두 채웠을 때, 빈 칸이 존재하면 안 된다.
----------------------------------------------------------------------------
06 MySolution: 1648번

#include <cstdio>
#include <cstring>

int dp[15 * 15][1 << 14], n, m;
const int MOD = 9901;

int dpf(int k, int s) {
    if (k == n * m && !s) return 1;
    if (k >= n * m) return 0;
    int &ret = dp[k][s];
    if (~ret) return ret;
    ret = 0;
    if (s & 1) ret = dpf(k + 1, s >> 1);
    else {
        ret += dpf(k + 1, (s >> 1) | (1 << (m - 1)));
        if ((k % m) != (m - 1) && !(s & 2)) ret += dpf(k + 2, s >> 2);
    }
    return ret % MOD;
}

int main() {
    scanf("%d %d", &n, &m);
    memset(dp, -1, sizeof dp);
    printf("%d", dpf(0, 0));
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

07 Question: 1657번

장홍준은 참 특이한 두부장수이다. 세로크기 N, 가로크기 M인 두부판을 가지고 2x1짜리 두부로 잘라서 판다. 그런데, 두부판의 위치마다 등급이 다르다. 그리고 2x1짜리에 등급이 어떻게 매겨지느냐에 따라 두부의 값도 천차만별이 된다. 다음 등급표를 보자.



위의 표는 2x1짜리 두부의 등급에 따라 매겨지는 두부의 가격표다. 예를 들어 “AC" 두부의 가격은 7이고, ”DB" 두부의 가격은 3이다.

세로크기 N, 가로크기 M의 두부판이 주어진다. 각 칸마다 두부의 등급이 A, B, C, D, F로 매겨져 있다. 홍준이는 전체 두부가격의 합을 최대가 되게 두부를 자르려고 한다. 2x1짜리 두부로 잘라내고 남은 한 칸짜리 두부는 가격이 0이기 때문에 버린다. 홍준이를 도와 가격이 최대가 되게 두부판을 자르는 프로그램을 작성하시오.



위 그림은 N=4, M=4 인 두부판의 한 예이다. 오른쪽 그림이 잘라낸 두부가격의 합을 최대로 한 것이다. 한 칸짜리는 쓸모없으므로 버린다.
----------------------------------------------------------------------------
07 MySolution: 1657번

#include <iostream>
#include <vector>
#include <string>
using namespace std;
int N, M;

vector<vector<int>> board(14, vector<int>(14, 0));
vector<vector<int>> dp_table(14*14, vector<int>(1 << 14, -1));
vector<vector<int>> price = {
        {10, 8, 7, 5, 1},
        {8, 6, 4, 3, 1},
        {7, 4, 3, 2, 1},
        {5, 3, 2, 2, 1},
        {1, 1, 1, 1, 0}
    };

int change(char a){
    if (a != 'F') return a - 'A';
    return 4;
}

int dp(int x, int state){
    if (x >= N*M){
        if(x == N*M && state == 0) return 0;
        return -1;
    }
    
    int& ret = dp_table[x][state];
    if(ret != -1) return ret;
    ret = 0;

    int cur = board[x / M][x % M];
    
    if ((state & 1) == 0){
        if ( x % M != M-1 && (state & (1<<1)) == 0){
            if (dp(x+2, state >> 2) != -1){
                int next = board[(x+1) / M][(x+1) % M];
                ret = max(ret, price[cur][next] + dp(x+2, state >> 2));
            }
        }
        if (dp(x+1, (state >> 1) | (1 << (M-1))) != -1 && (x/M) + 1 < N){
            int next = board[(x / M) + 1][x % M];
            ret = max(ret, price[cur][next] + dp(x+1, (state >> 1) | (1 << (M-1))));
        }
    }
    if (dp(x + 1, state >> 1) != -1){
        ret = max(ret, dp(x+1, state >> 1));
    }
    return ret;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin >> N >> M;
    string s;
    for(int i = 0; i < N; i++){
        cin >> s;
        for(int j = 0; j < M; j++){
            board[i][j] = change(s[j]);
        }
    }

    cout << dp(0, 0) << endl;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

08 Question: 11003번

N개의 수 A1, A2, ..., AN과 L이 주어진다.

Di = Ai-L+1 ~ Ai 중의 최솟값이라고 할 때, D에 저장된 수를 출력하는 프로그램을 작성하시오. 이때, i ≤ 0 인 Ai는 무시하고 D를 구해야 한다.
----------------------------------------------------------------------------
08 MySolution: 11003번

#include <iostream>
#include <vector>
#include <queue>
 
#define endl "\n"
#define MAX 5000010
using namespace std;
 
int N, L;
int Arr[MAX];
 
void Input()
{
    cin >> N >> L;
    for (int i = 1; i <= N; i++) cin >> Arr[i];
}
 
void Solution()
{
    deque<pair<int, int>> DQ;
    for (int i = 1; i <= N; i++)
    {
        if (DQ.empty() == false)
        {
            if (DQ.front().second < i - L + 1) DQ.pop_front();
        }
        while (DQ.empty() == false && DQ.back().first > Arr[i]) DQ.pop_back();
        DQ.push_back(make_pair(Arr[i], i));
        cout << DQ.front().first << " ";
    }
    cout << endl;
}
 
void Solve()
{
    Input();
    Solution();
}
 
int main(void)
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
 
    Solve();
 
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

10 Question: 15678번

연세대학교에서는 매년 여름 깜짝 워터파크를 개장한다. 이 워터파크가 발생할 장소는 알 수 없지만, 보통 도서관이나 서문 쪽에 주로 개장한다는 사실만이 알려져 있다.

워터파크 개장을 막는 것이 힘들다고 판단한 학교에서는 차라리 학생들이 워터파크를 더 즐길 수 있도록 정수 Ki (-109 ≤ Ki ≤ 109)가 쓰여진 징검다리 N개를 놓아 두었다. 수업이 끝나고 친구들과 집에 가던 준호는 문득 이 징검다리를 이용해 여러 명이 즐길 수 있는 재미있는 게임을 하나 생각해냈다.

각 사람은 시작점으로 쓸 징검다리 하나를 아무 것이나 하나 고른다.
시작점에서 출발한 뒤 계속 점프하여 징검다리를 몇 개든 마음대로 밟은 뒤, 나오고 싶을 때 나온다. 시작점에서 바로 나오는 것도 가능하다.
시작점을 포함해, 밟은 모든 징검다리에 쓰여진 정수의 합이 가장 큰 사람이 이긴다.
이 규칙에 따라 게임을 하던 준호는, 제자리 점프를 이용해 10억점을 만드는 친구를 본 뒤 규칙을 좀 더 추가하기로 하였다. 추가된 규칙은 아래와 같다.

N개의 모든 징검다리에 순서대로 1 ~ N의 번호를 붙인다. U번 징검다리에서 V번 징검다리로 점프하기 위해서는, U와 V의 차이가 미리 정해진 값 D 이하여야 한다.
어떤 징검다리도 두 번 이상(한 번을 넘게) 밟을 수는 없다.
이제 다시 게임을 진행하려 한다. 이 게임에서 준호는 최대 몇 점을 얻을 수 있을까?
----------------------------------------------------------------------------
10 MySolution: 15678번

#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

#define ll long long
using namespace std;
typedef pair<int, ll> pil; 

int main() {
    ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
    int N, D; cin >> N >> D;
    deque<pil> dq;
    ll ret = -1e15;

    for (int i=0; i<N; i++) {
        pil cache; cache.first = i; 
        cin >> cache.second;

        while (!dq.empty() && dq.front().first < i - D) 
            dq.pop_front();
        if (!dq.empty())
            cache.second = max(cache.second, dq.front().second + cache.second);
        while (!dq.empty() && dq.back().second <= cache.second)
            dq.pop_back();
        ret = max(ret, cache.second);
        dq.push_back(cache);
    }
    cout << ret << endl;
    return 0;
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
