01 Question: 11375번

강호네 회사에는 직원이 N명이 있고, 해야할 일이 M개가 있다. 직원은 1번부터 N번까지 번호가 매겨져 있고, 일은 1번부터 M번까지 번호가 매겨져 있다.

각 직원은 자신이 할 수 있는 일들 중 한 개의 일만 담당할 수 있고, 각각의 일을 담당하는 사람은 1명이어야 한다.

각각의 직원이 할 수 있는 일의 목록이 주어졌을 때, M개의 일 중에서 최대 몇 개를 할 수 있는지 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
01 MySolution: 11375번

#include<iostream>
#include <vector>
#include <cstring>
using namespace std;

vector<int> V[1002];
vector<int> Inhole[1002];
int N, M;
bool is_visit[1002];

bool dfs(int cur) {
	is_visit[cur] = true;
	for (auto& v : V[cur]) {
		if (Inhole[v].size() < 1) {
			Inhole[v].push_back(cur);
			return true;
		}
	}

	for (auto& v : V[cur]) {
		for (auto& np : Inhole[v]) {
			if (!is_visit[np] && dfs(np)) {
				np = cur;
				return true;
			}
		}
	}
	return false;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		int j;
		cin >> j;
		while (j--) {
			int value;
			cin >> value;

			V[i].push_back(value);
		}
	}

	int cnt = 0;
	for (int i = 0; i < N; i++) {
		if (dfs(i)) {
			cnt++;
		}
		for (int j = 0; j < N; j++) is_visit[j] = false;
	}
	cout << cnt << "\n";
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 11376번

강호네 회사에는 직원이 N명이 있고, 해야할 일이 M개가 있다. 직원은 1번부터 N번까지 번호가 매겨져 있고, 일은 1번부터 M번까지 번호가 매겨져 있다.

각 직원은 자신이 할 수 있는 일들 중 최대 두 개의 일을 담당할 수 있고, 각각의 일을 담당하는 사람은 1명이어야 한다.

각각의 직원이 할 수 있는 일의 목록이 주어졌을 때, M개의 일 중에서 최대 몇 개를 할 수 있는지 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 11376번

#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
#define MAX 1003
using namespace std;

vector<int> adj[MAX];
bool check[MAX];
int d[MAX];

bool dfs(int cur) {
	for (int nxt : adj[cur]) {
		if (check[nxt]) continue;
		check[nxt] = true;
		if (d[nxt] == 0 || dfs(d[nxt])) {
			d[nxt] = cur;
			return true;
		}
	}
	return false;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	int N, M, S,num;
	int cnt = 0;
	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		cin >> S;
		while (S--) {
			cin >> num;
			adj[i].push_back(num);
		}
	}
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= 2; j++) {
			fill(check, check + MAX, false);
			if (dfs(i)) cnt++;
		}
	}
	cout << cnt << "\n";
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

03 Question: 1017번

지민이는 수의 리스트가 있을 때, 이를 짝지어 각 쌍의 합이 소수가 되게 하려고 한다. 예를 들어, {1, 4, 7, 10, 11, 12}가 있다고 하자. 지민이는 다음과 같이 짝지을 수 있다.

1 + 4 = 5, 7 + 10 = 17, 11 + 12 = 23

또는

1 + 10 = 11, 4 + 7 = 11, 11 + 12 = 23

수의 리스트가 주어졌을 때, 지민이가 모든 수를 다 짝지었을 때, 첫 번째 수와 어떤 수를 짝지었는지 오름차순으로 출력하는 프로그램을 작성하시오. 위의 예제에서 1 + 12 = 13으로 소수이다. 그러나, 남은 4개의 수를 합이 소수가 되게 짝지을 수 있는 방법이 없다. 따라서 위의 경우 정답은 4, 10이다.
----------------------------------------------------------------------------
03 MySolution: 1017번

#include<iostream>
#include<queue>
#include<string.h>
#include<cmath>
#include<algorithm>
using namespace std;

const int MAXN = 2001;
bool is_prime[MAXN+1];
int arr_size;
vector<int> a_set, b_set;
vector<vector<int>> adj;
vector<int> a_match, b_match, visited;

void SieveEratos(){
  memset(is_prime, true, sizeof(is_prime));
  int sqrtn = int(sqrt(MAXN));

  is_prime[0] = is_prime[1] = false;
  for(int i=2; i<=sqrtn ; ++i){
    if(is_prime[i])
      for(int j= i*i ; j<=MAXN ; j+= i)
        is_prime[j] = false;
  }
}

bool DFS(int a_idx){
  if(a_idx == 0 || visited[a_idx])
    return false;
  visited[a_idx] = true;

  for(int i=0; i<adj[a_idx].size() ; ++i){
    int b_idx = adj[a_idx][i];

    if(b_match[b_idx] == -1 || DFS(b_match[b_idx])){
      a_match[a_idx] = b_idx;
      b_match[b_idx] = a_idx;
      return true;
    }
  }
  
  return false;
}


int main(){
  ios_base::sync_with_stdio(0);
  cin>>arr_size;

  int first_num;
  cin>>first_num;

  bool is_first_even;
  is_first_even = first_num%2 ==0 ? true : false;
  a_set.push_back(first_num);

  int temp;
  for(int i=1; i<arr_size ; ++i){
    cin>>temp;

    if(is_first_even){
      if(temp %2 == 0)
        a_set.push_back(temp);
      else 
        b_set.push_back(temp);
    }else{
      if(temp %2 != 0)
        a_set.push_back(temp);
      else 
        b_set.push_back(temp);
    }
  }

  if(b_set.size() != a_set.size()){
    cout<<-1<<'\n';
    return 0;
  }

  SieveEratos();

  adj = vector<vector<int>>(a_set.size());
  for(int i=0; i<a_set.size() ; ++i)
    for(int j=0; j<b_set.size() ; ++j)
      if(is_prime[a_set[i]+b_set[j]])
        adj[i].push_back(j);


  vector<int> answers;
  for(int i=0; i<adj[0].size(); ++i){
    int pair_b_idx = adj[0][i];
    int paired_size =1;

    a_match = vector<int>(a_set.size(), -1);
    b_match = vector<int>(b_set.size(), -1);
    
    a_match[0] = pair_b_idx;
    b_match[pair_b_idx] = 0;

    for(int j =1 ; j<a_set.size() ; ++j){
      visited = vector<int>(a_set.size(), false);
      if(DFS(j))
        paired_size++;
    }

    if(paired_size == b_set.size())
      answers.push_back(b_set[pair_b_idx]);
  }

  if(answers.size() != 0){
    sort(answers.begin(), answers.end());
    for(int i=0; i<answers.size() ; ++i)
      cout<<answers[i]<<' ';
  }else
    cout<<-1;
  
  cout<<'\n';
  
  return 0;
}
----------------------------------------------------------------------------
----------------------------------------------------------------------------
