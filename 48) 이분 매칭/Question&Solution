01 Question: 11375번

강호네 회사에는 직원이 N명이 있고, 해야할 일이 M개가 있다. 직원은 1번부터 N번까지 번호가 매겨져 있고, 일은 1번부터 M번까지 번호가 매겨져 있다.

각 직원은 자신이 할 수 있는 일들 중 한 개의 일만 담당할 수 있고, 각각의 일을 담당하는 사람은 1명이어야 한다.

각각의 직원이 할 수 있는 일의 목록이 주어졌을 때, M개의 일 중에서 최대 몇 개를 할 수 있는지 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
01 MySolution: 11375번

#include<iostream>
#include <vector>
#include <cstring>
using namespace std;

vector<int> V[1002];
vector<int> Inhole[1002];
int N, M;
bool is_visit[1002];

bool dfs(int cur) {
	is_visit[cur] = true;
	for (auto& v : V[cur]) {
		if (Inhole[v].size() < 1) {
			Inhole[v].push_back(cur);
			return true;
		}
	}

	for (auto& v : V[cur]) {
		for (auto& np : Inhole[v]) {
			if (!is_visit[np] && dfs(np)) {
				np = cur;
				return true;
			}
		}
	}
	return false;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		int j;
		cin >> j;
		while (j--) {
			int value;
			cin >> value;

			V[i].push_back(value);
		}
	}

	int cnt = 0;
	for (int i = 0; i < N; i++) {
		if (dfs(i)) {
			cnt++;
		}
		for (int j = 0; j < N; j++) is_visit[j] = false;
	}
	cout << cnt << "\n";
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------

02 Question: 11376번

강호네 회사에는 직원이 N명이 있고, 해야할 일이 M개가 있다. 직원은 1번부터 N번까지 번호가 매겨져 있고, 일은 1번부터 M번까지 번호가 매겨져 있다.

각 직원은 자신이 할 수 있는 일들 중 최대 두 개의 일을 담당할 수 있고, 각각의 일을 담당하는 사람은 1명이어야 한다.

각각의 직원이 할 수 있는 일의 목록이 주어졌을 때, M개의 일 중에서 최대 몇 개를 할 수 있는지 구하는 프로그램을 작성하시오.
----------------------------------------------------------------------------
02 MySolution: 11376번

#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
#define MAX 1003
using namespace std;

vector<int> adj[MAX];
bool check[MAX];
int d[MAX];

bool dfs(int cur) {
	for (int nxt : adj[cur]) {
		if (check[nxt]) continue;
		check[nxt] = true;
		if (d[nxt] == 0 || dfs(d[nxt])) {
			d[nxt] = cur;
			return true;
		}
	}
	return false;
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	int N, M, S,num;
	int cnt = 0;
	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		cin >> S;
		while (S--) {
			cin >> num;
			adj[i].push_back(num);
		}
	}
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= 2; j++) {
			fill(check, check + MAX, false);
			if (dfs(i)) cnt++;
		}
	}
	cout << cnt << "\n";
}

----------------------------------------------------------------------------
----------------------------------------------------------------------------
